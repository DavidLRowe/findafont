name: Build Find a font service image
on:
  push:
    branches: [ "main" ]
    paths-ignore:
    - kubernetes/**
    - test/**
    - testdata/**
    - README.md
  repository_dispatch:
    types: 
    - langtags-deployed
    - families-updated
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      - name: Generate unique time based tag
        id: tag
        run: echo "datetime=$(date -u +%g%V%u%H%M)" >> $GITHUB_OUTPUT

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.datetime }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://faf.languagetechnology.org/docs
    steps:
      - name: Deploy to staging
        uses: drlove2002/secure-github-webhook@0.3.0
        with:
          url: ${{ secrets.DEPLOY_WEBHOOK_URL }}
          hmacSecret: ${{ secrets.DEPLOY_KEY }}
          data: >-
            {
              "action" : "push",
              "ref" : "${{ github.ref }}"
            }
